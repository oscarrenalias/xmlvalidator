<project name="XML Validator" default="compile" basedir=".">
	<description>
        XML Validator
    </description>
	<!-- set global properties for this build -->
	<property name="src" location="src/main/java" />
    <property name="src.tests" location="src/main/java/tests" />
    <property name="libs" location="src/main/resources" />
	<property name="build" location="build" />
	<property name="dist" location="dist" />
	<property name="version" value="1.0" />
    <property name="enableJavacDebug" value="true" />
	<property name="jarBaseName" value="xmlvalidator" />

	<!-- set the current timestamp so that we can use it later -->
	<tstamp>
		<format property="TODAY.SHORT" pattern="yyyyMMdd" />
		<format property="NOW" pattern="yyyyMMdd-HH:mm:ss" />
	</tstamp>

	<!-- the classpath to be used in the project -->
	<path id="classpath">
        <pathelement path="${build}" />
		<pathelement path="src/main/resources" />
		<fileset dir="${libs}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- create a property containing all .jar files, prefix lib/, and separated with a space -->
	<pathconvert property="libs.project" pathsep="${path.separator}">
		<mapper>
			<chainedmapper>
				<!-- remove absolute path -->
				<flattenmapper />
				<!-- add lib/ prefix -->
				<globmapper from="*" to="lib/*" />
			</chainedmapper>
		</mapper>
		<path>
			<!-- lib.home contains all jar files, in several subdirectories -->
			<fileset dir="src/main/resources/lib">
				<include name="**/*.jar" />
			</fileset>
		</path>
	</pathconvert>

	<target name="compile">
        <mkdir dir="${build}" />
		<javac srcdir="${src}" destdir="${build}" debug="${enableJavacDebug}" target="1.5">
			<classpath refid="classpath" />
		</javac>
	</target>

	<target name="clean" description="clean up">
		<delete dir="${build}" />
		<delete dir="${dist}" />
	</target>
	
	<target name="run" description="Run the application">
		<java classname="net.renalias.xmlvalidator.Main">
			<classpath refid="classpath" />			
		</java>
	</target>
	
	<!-- this target generates a jar file with the needed files -->
	<target name="jar" depends="clean, compile">
		<mkdir dir="${dist}" />
		<!-- copy also all source files -->
        <copy todir="${build}/src/main/java">
            <fileset dir="${src}">
                <exclude name="**/*.jar" />
                <include name="**/*.java" />
            </fileset>
        </copy>
        <!-- and the test files -->
        <copy todir="${build}/src/main/resources">
            <fileset dir="src/main/resources">
                <include name="**/*.txt" />
            </fileset>
        </copy>
        <copy file="build.xml" todir="${build}/src" />
        <mkdir dir="${dist}/lib" />
		<jar jarfile="${dist}/lib/${jarBaseName}-${DSTAMP}.jar" basedir="${build}">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<section name="common">
					<attribute name="Specification-Title" value="XML Validator" />
					<attribute name="Specification-Version" value="${version}" />
					<attribute name="Specification-Vendor" value="Oscar Renalias" />
					<attribute name="Implementation-Title" value="common" />
					<attribute name="Implementation-Version" value="${version} ${TODAY}" />
					<attribute name="Implementation-Vendor" value="Oscar Renalias" />
				</section>
			</manifest>
		</jar>
		<echo message="JAR file is available in dist/ folder" />
	</target>

    <!-- creates the distributable package that can be independently run -->
    <target name="dist" depends="jar">
        <!-- copy the jar file -->
        <copy todir="${dist}/lib">
            <fileset dir="src/main/resources/lib">
                <include name="*.jar" />
            </fileset>
        </copy>
        <!-- copy the executable files -->
        <copy todir="${dist}">
            <fileset dir="bin">
                <include name="**/*" />
            </fileset>
            <filterset>
                <filter token="JARFILE" value="${jarBaseName}-${DSTAMP}.jar${path.separator}${libs.project}" />
            </filterset>
        </copy>
		<chmod file="${dist}/xmlvalidator.sh" perm="ugo+rwx" />
    </target>

	<!-- target for running the JUnit tests -->
	<target name="test" depends="compile">
		<junit haltonfailure="yes">
            <classpath refid="classpath" />
			<formatter type="plain" usefile="false" />
            <batchtest>
                <fileset dir="${build}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
		</junit>
	</target>
</project>